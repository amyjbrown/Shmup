Coding Style!

A) Initial comments
explain what each module does;
for instance if main() is where main program should be run from
General explanations of how to structure elements

imports - per PEP8

import [Nested Module] as [module name] such that "import Package.Modules as Module"


Functions

f(x: type, y:type)->Return(type):
"""
[Function Type] Discusses what it does on one line
Every further line should be usage suggest or explanation
:x: nature and type of X parameter
:z: nature and type of Z
:return: nature of return
"""
Explain stuff more!

1) Do not right return type if Return type is zero

2) Function Type Note -

Pure
Has no side effects either outside the function or in it's parameters
Does not contain "static" keywords or other internal state, should not interact with variables outside params
Return values may or may not be predictable - for instance, random evaluation or sampling
However, as we have
e.g. f(x) -> x**2
getLivingEntity(entities) -> [Entity 1, Entity 2, etc]
Any function marked Pure should inherintly have a return value
note IO CAN be pure, but will be constructed such that it returns the value and closes the object such that it
can be saved in memory

Constructor
Special Pure type
A special Class Method, Constructors will crate new class objects via their parameters
for instance, Graph.make_weighted_graph(self, weights) -> Weighted Graph

Mutator
Has side effects only in mutable parameters
May or may not return values, preferably have it so that operations changing functions can be changed
for instance, sorting in place or updating positions
Verbiage should reflect nature of the operation

Procedure
May induce side effects in non-parameters and parameters
MUST document what side effects are in documentation
may have return value [for instance in state machine] but not necessarily what it's useful for
Good for IO handling

__init__'s need no such description
Overloaded methods should follow description of parents lightly, then explain how they impliment
e.g. an overloaded __eq__ should explain it's ordering

Inline comments
per pep 8:
Larger explanations and direction or program flow on their own line
Small explanations (e.g. why grid[x-1]) to the side
Good code should be straightforward, but comments add understandability to what may seem like common sense

Module Testing

ALL non-main module Testing must go under a if __name__ == "__main__" call
Testing data should be defined there as well
Testing should either include various calls to see if it works, or a termial prompt for various parameters to see
where it breaks